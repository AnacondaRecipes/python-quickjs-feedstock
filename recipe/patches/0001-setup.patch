From 8a38e0763e7fa0a44894b986315c90a9bd1fea8f Mon Sep 17 00:00:00 2001
From: Steven <scrass@anaconda.com>
Date: Thu, 25 Sep 2025 15:23:54 -0600
Subject: [PATCH] Fix Windows/MSVC build compatibility issues

This patch addresses multiple issues that prevent successful builds on Windows with MSVC:

1. **Linking arguments**: Changed from "-static" to "-pthread" for Windows builds
   to avoid static linking issues with pthreads library.

2. **Compilation arguments**: Made the GCC-specific "-Werror=incompatible-pointer-types"
   flag conditional to only apply on non-Windows platforms. Windows/MSVC doesn't
   recognize this flag and fails with "invalid numeric argument" error.

3. **MSVC syntax compatibility**: Fixed incorrect semicolon after PyObject_HEAD
   in ObjectData struct definition (line 38 in module.c). This syntax error
   caused cascading compilation failures in MSVC.

The patch ensures that:
- Windows builds use empty compile args (no GCC-specific warnings)
- Non-Windows builds continue to use the strict pointer type checking
- Both linking and compilation arguments are platform-appropriate
- C syntax is compatible with both GCC and MSVC compilers

This resolves the build failures:
- cl : Command line error D8021 : invalid numeric argument '/Werror=incompatible-pointer-types'
- error C2059: syntax error: ';' (PyObject_HEAD syntax issue)
- Multiple cascading type and syntax errors in MSVC
---
 commit_message.txt | 25 +++++++++++++++++++++++++
 module.c           |  2 +-
 setup.py           | 12 ++++++++----
 3 files changed, 34 insertions(+), 5 deletions(-)
 create mode 100644 commit_message.txt

diff --git a/commit_message.txt b/commit_message.txt
new file mode 100644
index 0000000..3578dfe
--- /dev/null
+++ b/commit_message.txt
@@ -0,0 +1,25 @@
+Fix Windows/MSVC build compatibility issues
+
+This patch addresses multiple issues that prevent successful builds on Windows with MSVC:
+
+1. **Linking arguments**: Changed from "-static" to "-pthread" for Windows builds
+   to avoid static linking issues with pthreads library.
+
+2. **Compilation arguments**: Made the GCC-specific "-Werror=incompatible-pointer-types"
+   flag conditional to only apply on non-Windows platforms. Windows/MSVC doesn't
+   recognize this flag and fails with "invalid numeric argument" error.
+
+3. **MSVC syntax compatibility**: Fixed incorrect semicolon after PyObject_HEAD
+   in ObjectData struct definition (line 38 in module.c). This syntax error
+   caused cascading compilation failures in MSVC.
+
+The patch ensures that:
+- Windows builds use empty compile args (no GCC-specific warnings)
+- Non-Windows builds continue to use the strict pointer type checking
+- Both linking and compilation arguments are platform-appropriate
+- C syntax is compatible with both GCC and MSVC compilers
+
+This resolves the build failures:
+- cl : Command line error D8021 : invalid numeric argument '/Werror=incompatible-pointer-types'
+- error C2059: syntax error: ';' (PyObject_HEAD syntax issue)
+- Multiple cascading type and syntax errors in MSVC
diff --git a/module.c b/module.c
index fba11c3..aa53e01 100644
--- a/module.c
+++ b/module.c
@@ -35,7 +35,7 @@ typedef struct {
 
 // The data of the type _quickjs.Object.
 typedef struct {
-	PyObject_HEAD;
+	PyObject_HEAD
 	RuntimeData *runtime_data;
 	JSValue object;
 } ObjectData;
diff --git a/setup.py b/setup.py
index 9d17af3..de7bf5e 100644
--- a/setup.py
+++ b/setup.py
@@ -6,6 +6,7 @@ from setuptools import setup, Extension
 
 CONFIG_VERSION = open("upstream-quickjs/VERSION").read().strip()
 extra_link_args: List[str] = []
+extra_compile_args: List[str] = []
 
 if sys.platform == "win32":
     # To build for Windows:
@@ -17,9 +18,12 @@ if sys.platform == "win32":
     # 3. The code below will moneky-patch distutils to work.
     import distutils.cygwinccompiler
     distutils.cygwinccompiler.get_msvcr = lambda: [] 
-    # Make sure that pthreads is linked statically, otherwise we run into problems
-    # on computers where it is not installed.
-    extra_link_args = ["-static"]
+    extra_link_args = ["-pthread"]
+    # Windows/MSVC doesn't support GCC-specific warning flags
+    extra_compile_args = []
+else:
+    # GCC-specific warning flags for non-Windows platforms
+    extra_compile_args = ["-Werror=incompatible-pointer-types"]
 
 
 def get_c_sources(include_headers=False):
@@ -54,7 +58,7 @@ _quickjs = Extension(
     # HACK.
     # See https://github.com/pypa/packaging-problems/issues/84.
     sources=get_c_sources(include_headers=("sdist" in sys.argv)),
-    extra_compile_args=["-Werror=incompatible-pointer-types"],
+    extra_compile_args=extra_compile_args,
     extra_link_args=extra_link_args)
 
 long_description = """
-- 
2.50.1 (Apple Git-155)

