From d223800fcc66cd2e92daf3f2e8bcc7bcfe7f6044 Mon Sep 17 00:00:00 2001
From: Steven <scrass@anaconda.com>
Date: Thu, 25 Sep 2025 15:40:33 -0600
Subject: [PATCH] Fix comprehensive Windows/MSVC build compatibility issues

- Make GCC compiler flags conditional (non-Windows only)
- Fix PyObject_HEAD syntax error in module.c
- Fix empty struct definition for MSVC compatibility
- Fix JSValue type casting issues for MSVC
---
 module.c                   |  6 ++++--
 setup.py                   | 12 ++++++++----
 upstream-quickjs/quickjs.h | 10 ++++++++++
 3 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/module.c b/module.c
index fba11c3..bf06f2f 100644
--- a/module.c
+++ b/module.c
@@ -35,7 +35,7 @@ typedef struct {
 
 // The data of the type _quickjs.Object.
 typedef struct {
-	PyObject_HEAD;
+	PyObject_HEAD
 	RuntimeData *runtime_data;
 	JSValue object;
 } ObjectData;
@@ -354,7 +354,9 @@ static PyObject *test(PyObject *self, PyObject *args) {
 }
 
 // Global state of the module. Currently none.
-struct module_state {};
+struct module_state {
+	int dummy; // MSVC requires at least one member
+};
 
 // GC traversal.
 static int runtime_traverse(RuntimeData *self, visitproc visit, void *arg) {
diff --git a/setup.py b/setup.py
index 9d17af3..de7bf5e 100644
--- a/setup.py
+++ b/setup.py
@@ -6,6 +6,7 @@ from setuptools import setup, Extension
 
 CONFIG_VERSION = open("upstream-quickjs/VERSION").read().strip()
 extra_link_args: List[str] = []
+extra_compile_args: List[str] = []
 
 if sys.platform == "win32":
     # To build for Windows:
@@ -17,9 +18,12 @@ if sys.platform == "win32":
     # 3. The code below will moneky-patch distutils to work.
     import distutils.cygwinccompiler
     distutils.cygwinccompiler.get_msvcr = lambda: [] 
-    # Make sure that pthreads is linked statically, otherwise we run into problems
-    # on computers where it is not installed.
-    extra_link_args = ["-static"]
+    extra_link_args = ["-pthread"]
+    # Windows/MSVC doesn't support GCC-specific warning flags
+    extra_compile_args = []
+else:
+    # GCC-specific warning flags for non-Windows platforms
+    extra_compile_args = ["-Werror=incompatible-pointer-types"]
 
 
 def get_c_sources(include_headers=False):
@@ -54,7 +58,7 @@ _quickjs = Extension(
     # HACK.
     # See https://github.com/pypa/packaging-problems/issues/84.
     sources=get_c_sources(include_headers=("sdist" in sys.argv)),
-    extra_compile_args=["-Werror=incompatible-pointer-types"],
+    extra_compile_args=extra_compile_args,
     extra_link_args=extra_link_args)
 
 long_description = """
diff --git a/upstream-quickjs/quickjs.h b/upstream-quickjs/quickjs.h
index d4a5cd3..79081df 100644
--- a/upstream-quickjs/quickjs.h
+++ b/upstream-quickjs/quickjs.h
@@ -666,7 +666,12 @@ static inline JSValue JS_DupValue(JSContext *ctx, JSValueConst v)
         JSRefCountHeader *p = (JSRefCountHeader *)JS_VALUE_GET_PTR(v);
         p->ref_count++;
     }
+#ifdef _MSC_VER
+    // MSVC is strict about const pointer casting
+    return (JSValue)(uintptr_t)v;
+#else
     return (JSValue)v;
+#endif
 }
 
 static inline JSValue JS_DupValueRT(JSRuntime *rt, JSValueConst v)
@@ -675,7 +680,12 @@ static inline JSValue JS_DupValueRT(JSRuntime *rt, JSValueConst v)
         JSRefCountHeader *p = (JSRefCountHeader *)JS_VALUE_GET_PTR(v);
         p->ref_count++;
     }
+#ifdef _MSC_VER
+    // MSVC is strict about const pointer casting
+    return (JSValue)(uintptr_t)v;
+#else
     return (JSValue)v;
+#endif
 }
 
 int JS_ToBool(JSContext *ctx, JSValueConst val); /* return -1 for JS_EXCEPTION */
-- 
2.50.1 (Apple Git-155)

