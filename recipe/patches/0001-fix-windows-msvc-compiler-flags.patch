From ef4663ef9ff8da7d4a14d3ff6f9cc8636771e13c Mon Sep 17 00:00:00 2001
From: Steven <scrass@anaconda.com>
Date: Thu, 25 Sep 2025 13:05:38 -0600
Subject: [PATCH] Fix Windows build by making compiler flags platform-aware

The build was failing on Windows with MSVC because the setup.py was using
GCC/Clang-specific compiler flags (-Werror=incompatible-pointer-types) that
are not recognized by Microsoft Visual C++.

This patch makes the compiler flags platform-aware:
- Windows (MSVC): Uses /we4133 to treat incompatible pointer types as errors
- Unix/macOS (GCC/Clang): Uses -Werror=incompatible-pointer-types

This ensures cross-platform compatibility while maintaining the same level
of compile-time error checking for pointer type safety.

Fixes: cl : Command line error D8021 : invalid numeric argument '/Werror=incompatible-pointer-types'
---
 commit_message.txt | 14 ++++++++++++++
 setup.py           |  8 +++++++-
 2 files changed, 21 insertions(+), 1 deletion(-)
 create mode 100644 commit_message.txt

diff --git a/commit_message.txt b/commit_message.txt
new file mode 100644
index 0000000..aae3b20
--- /dev/null
+++ b/commit_message.txt
@@ -0,0 +1,14 @@
+Fix Windows build by making compiler flags platform-aware
+
+The build was failing on Windows with MSVC because the setup.py was using
+GCC/Clang-specific compiler flags (-Werror=incompatible-pointer-types) that
+are not recognized by Microsoft Visual C++.
+
+This patch makes the compiler flags platform-aware:
+- Windows (MSVC): Uses /we4133 to treat incompatible pointer types as errors
+- Unix/macOS (GCC/Clang): Uses -Werror=incompatible-pointer-types
+
+This ensures cross-platform compatibility while maintaining the same level
+of compile-time error checking for pointer type safety.
+
+Fixes: cl : Command line error D8021 : invalid numeric argument '/Werror=incompatible-pointer-types'
diff --git a/setup.py b/setup.py
index 2c98983..a0d718c 100644
--- a/setup.py
+++ b/setup.py
@@ -6,6 +6,7 @@ from setuptools import setup, Extension
 
 CONFIG_VERSION = open("upstream-quickjs/VERSION").read().strip()
 extra_link_args: List[str] = []
+extra_compile_args: List[str] = []
 
 if sys.platform == "win32":
     # To build for Windows:
@@ -18,6 +19,11 @@ if sys.platform == "win32":
     import distutils.cygwinccompiler
     distutils.cygwinccompiler.get_msvcr = lambda: [] 
     extra_link_args = ["-pthread"]
+    # Use MSVC-compatible warning flags for Windows
+    extra_compile_args = ["/we4133"]  # Treat incompatible pointer type as error
+else:
+    # Use GCC/Clang flags for Unix/macOS
+    extra_compile_args = ["-Werror=incompatible-pointer-types"]
 
 
 def get_c_sources(include_headers=False):
@@ -52,7 +58,7 @@ _quickjs = Extension(
     # HACK.
     # See https://github.com/pypa/packaging-problems/issues/84.
     sources=get_c_sources(include_headers=("sdist" in sys.argv)),
-    extra_compile_args=["-Werror=incompatible-pointer-types"],
+    extra_compile_args=extra_compile_args,
     extra_link_args=extra_link_args)
 
 long_description = """
-- 
2.50.1 (Apple Git-155)

